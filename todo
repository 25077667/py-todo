#!/usr/bin/env python3
# -*- encoding: utf-8 -*-

import sys
import pickle
import re
import math
from enum import IntEnum
from pathlib import Path
from datetime import datetime
from datetime import timedelta

""" Define config and data file locations """
config_location = str(Path.home()) + '/.config/py-todo/'
datafile_location = str(Path.home()) + '/.local/share/py-todo/'

""" Define config and data file names """
config_name = 'config'
datafile_name = 'todo.dat'

""" Create dictionary representing the config file """
config = {
    'detail_mode': 'false',
    'week_start_day': 'Sun',
    'color': 'false'
}

""" Define colors """
color5 = '\x1b[0;34;40m{}\x1b[0m'
color3 = '\x1b[0;32;40m{}\x1b[0m'

""" List of TodoItems, to be stored later in the datafile """
items = []


class Weekday(IntEnum):
    """ Some weekday constants """
    MONDAY = 0
    SATURDAY = 5
    SUNDAY = 6


class TodoItem:
    """ A class definition for each todo item, which is defined with todo -a, and stored in the datafile """
    def __init__(self, title: str, exp_date: datetime):
        self.title = title
        self.exp_date = exp_date  # Expiration date, type: datetime

    def __str__(self):
        if self.exp_date is None:
            return self.title
        
        # Set the amount of days left as the timedelta from today to the expiration date, in days.
        days_left = (self.exp_date - datetime.today()).days + 1
        
        if days_left == 0:
            return self.title + " (Today)"  # Annotate as the current day
        elif days_left == 1:
            return self.title + " (Tomorrow)"  # Annotate as tomorrow
        elif days_left > 1:
            output_str = self.title + " ("
            
            # If in detail mode, annotate more explicitly (i.e. give the due weekday)
            if 'detail_mode' in config and config['detail_mode'] in ['true', 'True']:
                # Calculate weeks_left to determine the event is in this or the next week.
                # Last weekday is Saturday by default.
                last_weekday = Weekday.SATURDAY
                if 'week_start_day' in config:
                    week_start_day_str = config['week_start_day'].lower()
                    if week_start_day_str in ['sun', 'mon']:
                        last_weekday = Weekday.SATURDAY if week_start_day_str == 'sun' else Weekday.SUNDAY
                days_to_next_week = last_weekday - datetime.today().weekday()
                weeks_left = math.ceil( (days_left - days_to_next_week) / 7 )
                
                # weeks_left == 0 implies this week;
                # weeks_left == 1 implies next week.
                if weeks_left == 0 or weeks_left == 1:
                    output_str += "{this_or_next} {weekday}; ".format(
                        this_or_next="This" if weeks_left == 0 else "Next",
                        weekday=self.exp_date.strftime("%A")
                    )
            return output_str + "{days_left} days left)".format(days_left=days_left)
        else:
            return self.title + " (DUE!)"


def add_item(title: str, exp_date: datetime):
    """ Adds a Todo item to the item list """
    items.append(TodoItem(title, exp_date))


def remove_item(indices: list):
    """ Removes a Todo item from the item list """
    for index in sorted(indices, reverse=True):
        del items[index]


def list_items():
    """ Iterates through each Todo item in the item list and print them. """    
    if len(items) > 0:
        print("You have {item_count} item{s} left on the reminder!".format(
            item_count=len(items), s="s" if len(items) >= 2 else ""))
        index = 0
        for item in items:
            if 'color' in config and config['color'] in ['true', 'True']:
                if '(' in item.__str__():
                    date = '(' + item.__str__().split('(')[1]
                    print(color5.format(str(index) + ") ") + item.title + " " + color3.format(date))
                else:
                    print(color5.format(str(index) + ") ") + item.__str__())
            else:
                print(str(index) + ") " + item.__str__())
            index += 1


def parse_date_str(exp_dat_str):
    """ Tries to parse raw date string into a datetime object. """
    try:
        if exp_date_str == '':
            return None
        elif exp_date_str.endswith('d'):
            day_count = int( exp_date_str.split('d')[0] )
            return datetime.today() + timedelta(days=day_count)
        else:
            return datetime(*map(int, exp_date_str.split('/')))
    except:
        print("An error occurred while parsing your date.")
        sys.exit()


def print_usage():
    print()
    print("Usage: " + sys.argv[0] + " <argument>")
    print("-a --add                                  -- Add a new item.")
    print("-a --add <title> <date or days>           -- Add a new item with a title and expiry date provided.")
    print("-e --edit <index>                         -- Edit an item.")
    print("-e --edit <index> <title> <date or days>  -- Edit an item with a title and expiry date provided.")
    print("-r --remove <indices...>                  -- Remove items by their indices.")
    print("-l --list                                 -- List all items.")
    print("-org --orgfile <filename>                 -- Add org file TODOs.")
    print()
    print("-h --help                                 -- Display help message.")
    print("-v --version                              -- Display version info.")
    print('\n')
    print("Configuration Options (See " + config_location + config_name + "):")
    print("* color = true / false")
    print("* detail_mode = true / false")
    print("* week_start_day = Sun / Mon")


def print_version():
    print("py-todo 1.3.2")
    print("Copyright (C) 2018 Marco Wang")
    print("")
    print("This is free software, see the source for copying conditions.  There is NO")
    print("warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE")


if __name__ == '__main__':
    # mkdir -p on config_location and datafile_location.
    Path(config_location).mkdir(parents=True, exist_ok=True)
    Path(datafile_location).mkdir(parents=True, exist_ok=True)

    # Try to load user configuration.
    try:
        with open(config_location + config_name, 'r') as f:
            for line in f:
                if not line.startswith('#'):
                    key, val = line.replace(' ', '').split('=')
                    config[key] = val.rstrip('\n')
    except FileNotFoundError:
        pass

    # Try to unpickle todo list from the file.
    try:
        with open(datafile_location + datafile_name, 'rb') as f:
            items = pickle.load(f)
    except:
        pass

    # Command line argument parsing.
    if len(sys.argv) <= 1:
        list_items()

    elif sys.argv[1] == '-l' or sys.argv[1] == '--list':
        list_items()

    elif sys.argv[1] == '-a' or sys.argv[1] == '--add':
        try:
            title = sys.argv[2] if len(sys.argv) > 2 else input("Title: ")
            exp_date_str = sys.argv[3] if len(sys.argv) > 3 else input("Expiry date (YYYY/MM/DD or <days>d) (Optional): ")
            
            exp_date = parse_date_str(exp_date_str)
            add_item(title, exp_date)
            list_items()
        except:
            # If the input is canceled, print a newline for prettiness, insert old item, list the items and exit
            print()
            list_items()
            sys.exit()

    elif sys.argv[1] == '-r' or sys.argv[1] == '--remove':
        if len(sys.argv) >= 3:
            try:
                indices = list(map(int, sys.argv[2:]))
                remove_item(indices)
                list_items()
            except:
                print("Item does not exist.")
        else:
            print_usage()

    elif sys.argv[1] == '-e' or sys.argv[1] == '--edit':
        if len(sys.argv) >= 3:
            try:
                item = items[int(sys.argv[2])] 
                title = sys.argv[3] if len(sys.argv) > 3 else input("Title ({default_title}): ".format(default_title=item.title))
                exp_date_str = sys.argv[4] if len(sys.argv) > 4 else input("Expiry date (YYYY/MM/DD or <days>d) (Optional): ")
                
                item.title = item.title if title.rstrip() == "" else title
                item.exp_date = parse_date_str(exp_date_str)
                list_items()
            except IndexError:
                print("Item does not exist.")
                sys.exit()
            except KeyboardInterrupt:
                # If the input is canceled, print a newline for prettiness, insert old item, list the items and exit
                print()
                insert_todo_item(old_index, old_item)
                list_items()
                sys.exit()
        else:
            print_usage()

    elif sys.argv[1] == '-org' or sys.argv[1] == '--orgfile':
        keywords = []
        filename = str(sys.argv[2])
        # Open the orgfile
        with open(filename, 'r') as f:
            content = f.readlines()
            for index, line in enumerate(content):
                # Search for the header to obtain the keywords
                if "#+TODO:" in line:
                    todos = line.replace('#+TODO: ', '')
                    for word in todos.split():
                        if word != '|':
                            keywords.append(word)
                else:
                    if not keywords:
                        keywords.append('TODO')
                        keywords.append('DONE')
                    for word in keywords:
                        # Search in each line and format if match
                        if word in line and '*' in line:
                            line = line.strip('*')
                            line = line.replace(word, '')
                            line = line.strip()
                            title = line
                            try:
                                if ': <' in content[index + 1]:
                                    line, date = content[index + 1].split('<')
                                    match = re.search(r'\d{4}-\d{2}-\d{2}', date)
                                    date = match.group(0)
                                    date = datetime(*map(int, date.split('-')))
                                    exp_date = date
                                    add_item(title, exp_date)
                                else:
                                    date = None
                                    exp_date = date
                                    add_item(title, exp_date)
                            except IndexError:
                                date = None
                                exp_date = date
                                add_item(title, exp_date)
        list_items()
 
    elif sys.argv[1] == '-v' or sys.argv[1] == '--version':
        print_version()

    else:
        print_usage()

    # Write all changes back to the file.
    with open(datafile_location + datafile_name, 'wb') as f:
        pickle.dump(items, f)
