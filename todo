#!/usr/bin/env python3

import sys
import pickle
from pathlib import Path

class TodoItem:
    def __init__(self, title, desc):
        self.title = title
        self.desc = desc
    def __str__(self):
        return self.title + " (" + self.desc + ")" if len(self.desc) > 0 else self.title

datafile_location = str(Path.home()) + '/.local/share/pyTodo/'
datafile_name = 'todo.dat'
items = []

def add_item(title: str, desc: str):
    items.append(TodoItem(title, desc))

def remove_item(index: int):
    del items[index]

def list_items():
    if len(items) > 0:
        print("You still have " + str(len(items)) + " items left!")
        index = 0
        for item in items:
            print(str(index) + ") " + item.__str__())
            index += 1

def print_usage():
    print("")
    print("Usage: ." + sys.argv[0] + " <argument>")
    print("-a --add                 -- Adds a new item.")
    print("-r --remove <index>      -- Removes an item by index.")
    print("-l --list                -- Lists all items.")
    print()
    print("-h --help                -- Displays help message.")
    print("-v --version             -- Displays version info.")

def print_version():
    print("pyTodo 0.1")
    print("Copyright (C) 2018 Marco Wang")
    print("")
    print("This is free software, see the source for copying conditions.  There is NO")
    print("warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE")


if __name__ == '__main__':
    Path(datafile_location).mkdir(parents=True, exist_ok=True)

    try:
        with open(datafile_location + datafile_name, 'rb') as f:
            items = pickle.load(f)
    except:
        print("Initialized " + datafile_name  + " at " + datafile_location + datafile_name)

    if len(sys.argv) <= 1:
        list_items()
        
    elif sys.argv[1] == '-a' or sys.argv[1] == '--add':
        print("Adding an item:")
        title = input("Title: ")
        desc = input("Description: ")
        add_item(title, desc)
        
    elif sys.argv[1] == '-r' or sys.argv[1] == '--remove':
        if len(sys.argv) >= 3:
            try:
                remove_item(int(sys.argv[2]))
                print("Removed item " + sys.argv[2])
            except:
                print("Item does not exist.")
        else:
            print_usage()
        
    elif sys.argv[1] == '-l' or sys.argv[1] == '--list':
        list_items()
        
    elif sys.argv[1] == '-v' or sys.argv[1] == '--version':
        print_version()

    else:
        print_usage()

    with open(datafile_location + datafile_name, 'wb') as f:
        pickle.dump(items, f)
