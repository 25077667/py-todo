#!/usr/bin/env python3
# -*- encoding: utf-8 -*-

import sys
import pickle
import re
from pathlib import Path
from datetime import datetime
from datetime import date


class TodoItem:
    def __init__(self, title, exp_date=None):
        self.title = title
        self.exp_date = exp_date

    def __str__(self):
        if self.exp_date is None:
            return self.title
        else:
            days_left = (self.exp_date - datetime.now()).days
            weekDay   = datetime.isoweekday(self.exp_date)

            daysOfTheWeek = ["", "Next Monday", "Next Tuesday", "Next Wednesday", "Next Thursday", "Next Friday", "Next Saturday", "Next Sunday"]

            if days_left > 6:
                return self.title + " ({days_left} days left.)".format(
                    days_left=days_left)
            elif days_left > 0 and days_left <= 6:
                return self.title +" ({dayOfTheWeek})".format(dayOfTheWeek = daysOfTheWeek[weekDay])
            elif days_left == 0:
                return self.title + " (Tomorrow)"
            elif days_left == -1:
                return self.title + " (Today)"
            else:
                return self.title + " (DUE!)"


datafile_location = str(Path.home()) + '/.local/share/py-todo/'
datafile_name = 'todo.dat'
items = []


def add_item(title: str, exp_date: datetime):
    items.append(TodoItem(title, exp_date))


def remove_item(index: int):
    del items[index]

def list_items():
    if len(items) > 0:
        print("You have {item_count} item{s} left on the reminder!".format(
            item_count=len(items), s="s" if len(items) >= 2 else ""))
        index = 0
        for item in items:
            print(str(index) + ") " + item.__str__())
            index += 1

def print_usage():
    print("")
    print("Usage: ." + sys.argv[0] + " <argument>")
    print("-a --add                   -- Adds a new item. With Title prompt")
    print("-a --add <item>            -- Adds a new item. Without Title prompt")
    print("-r --remove <index>        -- Removes an item by index.")
    print("-l --list                  -- Lists all items.")
    print("-org --orgfile <filename>  -- Add org file TODOs.")
    print("")
    print("-h --help                  -- Displays help message.")
    print("-v --version               -- Displays version info.")


def print_version():
    print("py-todo 0.2")
    print("Copyright (C) 2018 Marco Wang")
    print("")
    print("This is free software, see the source for copying conditions.  There is NO")
    print("warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE")


if __name__ == '__main__':
    # mkdir -p on datafile_location.
    Path(datafile_location).mkdir(parents=True, exist_ok=True)

    # Try to unpickle todo list from the file.
    try:
        with open(datafile_location + datafile_name, 'rb') as f:
            items = pickle.load(f)
    except:
        pass

    # Command line argument parsing.
    if len(sys.argv) <= 1:
        list_items()

    elif sys.argv[1] == '-a' or sys.argv[1] == '--add':

        title = input("Title: ")
        exp_date = input("Expiry date (e.g., YYYY/MM/DD, 1d) (Optional): ")
        if len(sys.argv) > 2:
            title = sys.argv[2]
        else:
            title = input("Title: ")

        exp_date = input("Expiry date (e.g., YYYY/MM/DD) (Optional): ")
        if exp_date == '':
            exp_date = None

        elif "d" in exp_date:
            d = exp_date.split('d')
            integerD = int(d[0])
            expDate = datetime.today().toordinal() + integerD
            exp_date = date.fromordinal(expDate)
            exp_date = datetime.combine(exp_date, datetime.min.time())
        else:
            try:
                exp_date = datetime(*map(int, exp_date.split('/')))
                print(exp_date)
            except:
                print("An error occurred while parsing your date.")
                sys.exit()

        add_item(title, exp_date)
        list_items()

    elif sys.argv[1] == '-org' or sys.argv[1] == '--orgfile':
        keywords = []
        filename = str(sys.argv[2])
        # Open the orgfile
        with open(filename, 'r') as f:
            content = f.readlines()
            for index, line in enumerate(content):
                # Search for the header to obtain the keywords
                if "#+TODO:" in line:
                    todos = line.replace('#+TODO: ', '')
                    for word in todos.split():
                        if word != '|':
                            keywords.append(word)
                else:
                    if not keywords:
                        keywords.append('TODO')
                        keywords.append('DONE')
                    for word in keywords:
                        # Search in each line and format if match
                        if word in line and '*' in line:
                            line = line.strip('*')
                            line = line.replace(word, '')
                            line = line.strip()
                            title = line
                            try:
                                if ': <' in content[index + 1]:
                                    line, dat = content[index + 1].split('<')
                                    match = re.search(r'\d{4}-\d{2}-\d{2}', dat)
                                    dat = match.group(0)
                                    dat = datetime(*map(int, dat.split('-')))
                                    exp_date = dat
                                    add_item(title, exp_date)
                                else:
                                    dat = None
                                    exp_date = dat
                                    add_item(title, exp_date)
                            except IndexError:
                                dat = None
                                exp_date = dat
                                add_item(title, exp_date)
        list_items()

    #   Removing notes
    elif sys.argv[1] == '-r' or sys.argv[1] == '--remove':
        if len(sys.argv) >= 3:
            try:
                remove_item(int(sys.argv[2]))
                print("Removed item " + sys.argv[2] + "\n")
                list_items()
            except:
                print("Item does not exist.")
        else:
            print_usage()

    elif sys.argv[1] == '-l' or sys.argv[1] == '--list':
        list_items()

    elif sys.argv[1] == '-v' or sys.argv[1] == '--version':
        print_version()

    else:
        print_usage()
    # Write all changes back to the file.
    with open(datafile_location + datafile_name, 'wb') as f:
        pickle.dump(items, f)
