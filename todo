#!/usr/bin/env python3
# -*- encoding: utf-8 -*-

import sys
import pickle
import re
import math
from pathlib import Path
from datetime import datetime
from datetime import timedelta


config_location = str(Path.home()) + '/.config/py-todo/'
config_name = 'config'
config = {
    'detail_mode': 'false',
    'week_start_day': 'Sun'
}

datafile_location = str(Path.home()) + '/.local/share/py-todo/'
datafile_name = 'todo.dat'
items = []


class TodoItem:
    def __init__(self, title, exp_date=None):
        self.title = title
        self.exp_date = exp_date

    def __str__(self):
        if self.exp_date is None:
            return self.title
        else:
            days_left = (self.exp_date - datetime.today()).days + 1
            
            if days_left == 1:
                return self.title + " (Tomorrow)"
            elif days_left == 0:
                return self.title + " (Today)"
            elif days_left > 1:
                if 'detail_mode' in config and config['detail_mode'] in ['true', 'True']:
                    week_start_day = 5
                    if 'week_start_day' in config:
                        week_start_day_str = config['week_start_day'].lower()
                        if week_start_day_str in ['sun', 'mon']:
                            week_start_day = 5 if week_start_day_str == 'sun' else 6
                    days_to_next_week = week_start_day - datetime.today().weekday() # Monday = 0, ..., Sunday = 6
                    weeks_left = math.ceil( (days_left - days_to_next_week) / 7 )
                    
                    if weeks_left == 0:
                        return self.title + " (This {weekday}; {days_left} days left)".format(
                            weekday=self.exp_date.strftime("%A"), days_left=days_left)
                    elif weeks_left == 1:
                        return self.title + " (Next {weekday}; {days_left} days left)".format(
                            weekday=self.exp_date.strftime("%A"), days_left=days_left)
                return self.title + " ({days_left} days left)".format(days_left=days_left)
            else:
                return self.title + " (DUE!)"


def add_item(title: str, exp_date: datetime):
    items.append(TodoItem(title, exp_date))


def remove_item(indices: list):
    for index in sorted(indices, reverse=True):
        del items[index]


def list_items():
    if len(items) > 0:
        print("You have {item_count} item{s} left on the reminder!".format(
            item_count=len(items), s="s" if len(items) >= 2 else ""))
        index = 0
        for item in items:
            print(str(index) + ") " + item.__str__())
            index += 1


def print_usage():
    print()
    print("Usage: " + sys.argv[0] + " <argument>")
    print("-a --add                         -- Adds a new item.")
    print("-a --add <title> <date or days>  -- Adds a new item with a title and expiry date provided.")
    print("-r --remove <indices...>         -- Removes items by their indices.")
    print("-l --list                        -- Lists all items.")
    print("-org --orgfile <filename>        -- Add org file TODOs.")
    print()
    print("-h --help                        -- Displays help message.")
    print("-v --version                     -- Displays version info.")
    print('\n')
    print("Configuration Options (See " + config_location + config_name + "):")
    print("* detail_mode = true / false")
    print("* week_start_day = Sun / Mon")


def print_version():
    print("py-todo 1.3")
    print("Copyright (C) 2018 Marco Wang")
    print("")
    print("This is free software, see the source for copying conditions.  There is NO")
    print("warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE")


if __name__ == '__main__':
    # mkdir -p on config_location and datafile_location.
    Path(config_location).mkdir(parents=True, exist_ok=True)
    Path(datafile_location).mkdir(parents=True, exist_ok=True)

    # Try to load user configuration.
    try:
        with open(config_location + config_name, 'r') as f:
            for line in f:
                if not line.startswith('#'):
                    key, val = line.replace(' ', '').split('=')
                    config[key] = val.rstrip('\n')
    except FileNotFoundError:
        pass
    
    # Try to unpickle todo list from the file.
    try:
        with open(datafile_location + datafile_name, 'rb') as f:
            items = pickle.load(f)
    except:
        pass

    # Command line argument parsing.
    if len(sys.argv) <= 1:
        list_items()

    elif sys.argv[1] == '-a' or sys.argv[1] == '--add':
        title = sys.argv[2] if len(sys.argv) > 2 else input("Title: ")
        exp_date_str = sys.argv[3] if len(sys.argv) > 3 else input("Expiry date (YYYY/MM/DD or <days>d) (Optional): ")
        
        try:
            if exp_date_str == '':
                exp_date = None
            elif exp_date_str.endswith('d'):
                day_count = int( exp_date_str.split('d')[0] )
                exp_date = datetime.today() + timedelta(days=day_count)
            else:
                exp_date = datetime(*map(int, exp_date_str.split('/')))
        except:
            print("An error occurred while parsing your date.")
            sys.exit()
        
        add_item(title, exp_date)
        list_items()

    elif sys.argv[1] == '-org' or sys.argv[1] == '--orgfile':
        keywords = []
        filename = str(sys.argv[2])
        # Open the orgfile
        with open(filename, 'r') as f:
            content = f.readlines()
            for index, line in enumerate(content):
                # Search for the header to obtain the keywords
                if "#+TODO:" in line:
                    todos = line.replace('#+TODO: ', '')
                    for word in todos.split():
                        if word != '|':
                            keywords.append(word)
                else:
                    if not keywords:
                        keywords.append('TODO')
                        keywords.append('DONE')
                    for word in keywords:
                        # Search in each line and format if match
                        if word in line and '*' in line:
                            line = line.strip('*')
                            line = line.replace(word, '')
                            line = line.strip()
                            title = line
                            try:
                                if ': <' in content[index + 1]:
                                    line, date = content[index + 1].split('<')
                                    match = re.search(r'\d{4}-\d{2}-\d{2}', date)
                                    date = match.group(0)
                                    date = datetime(*map(int, date.split('-')))
                                    exp_date = date
                                    add_item(title, exp_date)
                                else:
                                    date = None
                                    exp_date = date
                                    add_item(title, exp_date)
                            except IndexError:
                                date = None
                                exp_date = date
                                add_item(title, exp_date)
        list_items()

    elif sys.argv[1] == '-r' or sys.argv[1] == '--remove':
        if len(sys.argv) >= 3:
            try:
                indices = list(map(int, sys.argv[2:]))
                remove_item(indices)
                list_items()
            except:
                print("Item does not exist.")
        else:
            print_usage()

    elif sys.argv[1] == '-l' or sys.argv[1] == '--list':
        list_items()

    elif sys.argv[1] == '-v' or sys.argv[1] == '--version':
        print_version()

    else:
        print_usage()

    # Write all changes back to the file.
    with open(datafile_location + datafile_name, 'wb') as f:
        pickle.dump(items, f)
